---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: f, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'f'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: f, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'f'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:3
symbol: a, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:3
symbol: b, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------


---------------------------------------------
AST Dump for function f
---------------------------------------------
LIST:
LIST ELEMENT #1:
	DECLARATION
		SPECIFIERS: INT 
		DECLARATOR #1
			IDENT: a
			TYPE: INT
		DECLARATOR #2
			IDENT: b
			TYPE: INT


LIST ELEMENT #2:
	ASSIGNMENT OP (=)
		IDENT: a
		NUM (numtype=int)	5	SIGNED

LIST ELEMENT #3:
	ASSIGNMENT OP (=)
		IDENT: b
		NUM (numtype=int)	1	SIGNED

LIST ELEMENT #4:
	DO_WHILE
		BODY:
			LIST:
			LIST ELEMENT #1:
				UNARY OP (--)
					IDENT: a

		COND:
			COMPARISON OP (>)
				IDENT: a
				IDENT: b

LIST ELEMENT #5:
	RETURN
		BINARY OP (+)
			IDENT: a
			IDENT: b


---------------------------------------------
QUAD generation for function f
---------------------------------------------
.BB0.0 
	a{lvar} = 	MOV $5
	b{lvar} = 	MOV $1
	BR .BB.0.1
.BB0.1 
	%T0 = 	SUB $1, a{lvar}
	a{lvar} = 	MOV %T0
	BR .BB.0.2
.BB0.2 
	CMP a{lvar}, b{lvar}
	BRGT .BB.0.1, .BB.0.3
.BB0.3 
	%T1 = 	ADD a{lvar}, b{lvar}
	RETURN %T1
