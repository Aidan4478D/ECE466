---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: f, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'f'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: f, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'f'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:2
symbol: i, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:2
symbol: sum, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------


---------------------------------------------
AST Dump for function f
---------------------------------------------
LIST:
LIST ELEMENT #1:
	DECLARATION
		SPECIFIERS: INT 
		DECLARATOR #1
			IDENT: i
			TYPE: INT
		DECLARATOR #2
			IDENT: sum
			TYPE: INT


LIST ELEMENT #2:
	FOR
		INIT:
			ASSIGNMENT OP (=)
				IDENT: i
				NUM (numtype=int)	0	SIGNED
		COND:
			COMPARISON OP (<)
				IDENT: i
				NUM (numtype=int)	10	SIGNED
		INCR:
			UNARY OP (++)
				IDENT: i
		BODY:
			LIST:
			LIST ELEMENT #1:
				ASSIGNMENT OP (=)
					IDENT: sum
					BINARY OP (+)
						IDENT: sum
						IDENT: i

			LIST ELEMENT #2:
				IF
					COND:
						COMPARISON OP (==)
							IDENT: sum
							NUM (numtype=int)	3	SIGNED
					THEN:
						CONTINUE

			LIST ELEMENT #3:
				IF
					COND:
						COMPARISON OP (>)
							IDENT: sum
							NUM (numtype=int)	7	SIGNED
					THEN:
						BREAK


LIST ELEMENT #3:
	RETURN
		IDENT: sum


---------------------------------------------
QUAD generation for function f
---------------------------------------------
.BB0.0 
	i{lvar} = 	MOV $0
	BR .BB.0.1
.BB0.1 
	CMP i{lvar}, $10
	BRLT .BB.0.2, .BB.0.4
.BB0.2 
	%T0 = 	ADD sum{lvar}, i{lvar}
	sum{lvar} = 	MOV %T0
	CMP sum{lvar}, $3
	BREQ .BB.0.3, .BB.0.5
.BB0.3 
	%T1 = 	ADD $1
	BR .BB.0.1
.BB0.4 
	RETURN sum{lvar}
.BB0.5 
	CMP sum{lvar}, $7
	BRGT .BB.0.4, .BB.0.6
.BB0.6 
	BR .BB.0.3
