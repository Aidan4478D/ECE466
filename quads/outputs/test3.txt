---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: z, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'z'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FILE_SCOPE scope starting at <stdin>:1]
<stdin>:1
symbol: z, scope: FILE_SCOPE, namespace = GENERAL, type = FUNCTION, storage = UNKNOWN
AST Tree for your symbol:
---------------------------------------------
FUNCTION 'z'
	RETURN TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:2
symbol: a, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------

---------------------------------------------
[in FUNCT_SCOPE scope starting at <stdin>:1]
<stdin>:2
symbol: b, scope: FUNCT_SCOPE, namespace = GENERAL, type = VARIABLE, storage = AUTO
AST Tree for your symbol:
---------------------------------------------
TYPE: INT
---------------------------------------------


---------------------------------------------
AST Dump for function z
---------------------------------------------
LIST:
LIST ELEMENT #1:
	DECLARATION
		SPECIFIERS: INT 
		DECLARATOR #1
			IDENT: a
			TYPE: INT
		DECLARATOR #2
			IDENT: b
			TYPE: INT


LIST ELEMENT #2:
	IF
		COND:
			COMPARISON OP (<)
				IDENT: a
				IDENT: b
		THEN:
			ASSIGNMENT OP (=)
				IDENT: a
				NUM (numtype=int)	1	SIGNED

LIST ELEMENT #3:
	IF
		COND:
			COMPARISON OP (!=)
				IDENT: b
				IDENT: a
		THEN:
			ASSIGNMENT OP (=)
				IDENT: b
				NUM (numtype=int)	3	SIGNED
		ELSE:
			ASSIGNMENT OP (=)
				IDENT: a
				NUM (numtype=int)	3	SIGNED


---------------------------------------------
QUAD generation for function z
---------------------------------------------
.BB0.0 
	CMP a{lvar}, b{lvar}
	BRLT .BB.0.2, .BB.0.1
.BB0.1 
	CMP b{lvar}, a{lvar}
	BRNE .BB.0.5, .BB.0.3
.BB0.2 
	a{lvar} = 	MOV $1
	BR .BB.0.1
.BB0.3 
	a{lvar} = 	MOV $3
	BR .BB.0.4
.BB0.4 
	RETURN 
.BB0.5 
	b{lvar} = 	MOV $3
	BR .BB.0.4




